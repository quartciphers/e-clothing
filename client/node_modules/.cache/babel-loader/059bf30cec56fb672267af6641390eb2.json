{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utlis';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess } from '../../redux/user/user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n  } catch (error) {}\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* oncheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/home/qc/RayDcode/React/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","oncheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest ,put, call,all } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\nimport {googleProvider,auth,createUserProfileDocument,getCurrentUser} from '../../firebase/firebase.utlis';\nimport {signInSuccess,signInFailure,signOutSuccess,signOutFailure,signUpSuccess} from '../../redux/user/user.actions';\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n\n    try {\n       \n        const userRef = yield  call(createUserProfileDocument,userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({id:userSnapshot.id, ...userSnapshot.data()}));\n\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n\n\n}\n\n\n\n\nexport function* signInWithGoogle(){\n  \n      try {\n          const {user} = yield auth.signInWithPopup(googleProvider);\n          yield getSnapshotFromUserAuth(user);\n\n      } catch (error) {\n          yield put(signInFailure(error));\n      }\n\n}\n\n\nexport function* onGoogleSignInStart(){\n\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\n\n}\n\n\n\nexport function* signInWithEmail({payload:{email,password}}){\n \n\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        put(signInFailure(error))\n    }\n\n}\n\nexport function* isUserAuthenticated(){\n    try {\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n\n        \n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* signOut(){\n    try {\n        yield auth.signOut();\n        yield (put(signOutSuccess()));\n\n        \n    } catch (error) {\n\n        yield put(signOutFailure(error));\n        \n    }\n}\n\nexport function* signUp({payload:{email,password,displayName}}){\n    try {\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\n        \n    } catch (error) {\n        \n    }\n}\n\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function*  oncheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated);\n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut);\n}\n\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp);\n}\n\n\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(isUserAuthenticated),call(onSignOutStart)]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}